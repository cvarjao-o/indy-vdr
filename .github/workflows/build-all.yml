name: "Build-All"

env:
  RUST_VERSION: "1.67.0"
  CROSS_VERSION: "0.2.4"
  DOCKER_REGISTRY: ghcr.io
  DOCKER_IMAGE_NAME: ${{ github.repository }}
  DOCKER_DEFAULT_PLATFORM: "linux/amd64"
  ANDROID_NDK: "r13b"
  ANDROID_SDK: "21"
  ANDROID_VERSION: "5.0.0_r1"

on:
  workflow_dispatch:

jobs:
  checks:
    name: Run checks
    strategy:
      matrix:
        os: [ubuntu-20.04]
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: clippy, rustfmt

      - name: Cache cargo resources
        uses: Swatinem/rust-cache@v2
        with:
          shared-key: deps
          cache-on-failure: true

      - name: Cargo check
        run: cargo check

      - name: Cargo fmt
        run: cargo fmt --all -- --check

      - if: "runner.os == 'Linux'"
        name: Pre-install cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

  build-android:
    name: Build library (Android)
    needs: [checks]
    runs-on: ubuntu-20.04
    permissions:
      packages: write
    strategy:
      matrix:
        target:
          [
            aarch64-linux-android,
            armv7-linux-androideabi,
            i686-linux-android,
            x86_64-linux-android,
          ]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ env.RUST_VERSION }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Checkout Cross
        uses: actions/checkout@v3
        with:
          repository: cross-rs/cross
          path: cross

      - name: git patch (cross)
        run: git apply ../patches/cross.patch
        working-directory: ./cross

      - name: Configure Android/NDK/SDK
        working-directory: ./cross
        run: |
          find ./docker -type f -name 'Dockerfile.*' -print0 | xargs -0 sed -i -E 's/ARG ANDROID_NDK=.*/ARG ANDROID_NDK=${{env.ANDROID_NDK}}/g'
          find ./docker -type f -name 'Dockerfile.*' -print0 | xargs -0 sed -i -E 's/ARG ANDROID_SDK=.*/ARG ANDROID_SDK=${{env.ANDROID_SDK}}/g'
          find ./docker -type f -name 'Dockerfile.*' -print0 | xargs -0 sed -i -E 's/ARG ANDROID_VERSION=.*/ARG ANDROID_VERSION=${{env.ANDROID_VERSION}}/g'
          grep 'ARG ANDROID_' ./docker/Dockerfile.*
          grep 'libunwind.a' ./docker/android-system.sh || true

      - name: Setup Cross.toml
        run: |
          echo '[target.${{matrix.target}}.dockerfile]' > Cross.toml
          echo 'file = "./cross/docker/Dockerfile.${{matrix.target}}"' >> Cross.toml
          echo 'context = "./cross/docker" ' >> Cross.toml
          echo 'build-args = { ANDROID_NDK = "${{env.ANDROID_NDK}}", ANDROID_SDK = "${{env.ANDROID_SDK}}", ANDROID_VERSION="${{env.ANDROID_VERSION}}" }' >> Cross.toml
          cat Cross.toml

      - name: Setup Cross
        run: |
          cargo install cross --git https://github.com/cross-rs/cross

      - name: Cross Build
        run: |
          cross build -vvvvv --release --target ${{matrix.target}} --package indy-vdr

      - name: Save library
        uses: actions/upload-artifact@v3
        with:
          name: ${{matrix.target}}
          path: target/${{ matrix.target }}/release/libindy_vdr.so
  publish:
    name: Publish libraries
    needs: [build-android]
    runs-on: ubuntu-20.04
    permissions:
      packages: write
    steps:
      - uses: actions/download-artifact@v3
        with:
          path: target
      - name: Display structure of downloaded files
        run: ls -laR
        working-directory: target
      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
      - name: mvn deploy
        run: |
          mvn --batch-mode deploy:deploy-file \
          --define "url=https://maven.pkg.github.com/${{github.repository}}" \
          --define "repositoryId=github" \
          --define "generatePom=false" \
          --define "groupId=com.github.${{github.repository_owner}}" \
          --define "artifactId=libindy_vdr" \
          --define "version=0.0.${{github.run_number}}-${{github.run_attempt}}" \
          --define "file=target/aarch64-linux-android/libindy_vdr.so" \
          --define "classifier=aarch64-linux-android" \
          --define "files=target/armv7-linux-androideabi/libindy_vdr.so,target/i686-linux-android/libindy_vdr.so,target/x86_64-linux-android/libindy_vdr.so" \
          --define "classifiers=armv7-linux-androideabi,i686-linux-android,x86_64-linux-android" \
          --define "types=so,so,so"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}